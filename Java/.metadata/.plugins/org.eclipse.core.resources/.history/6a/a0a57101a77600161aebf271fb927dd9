import java.awt.Color;
import java.awt.Point;

import rennyu.RFrame;

public class Editer {
	private static final Color BGColor=new Color(230,230,230);
	private static final int MODULE_DISTANCE=100;
	private RFrame frame;
	private Blopic blopic;
	private Module[] module;

	private int module_select_number;
	private Point camera_position;
	private Point old_camera_position;

	public Editer(String port) throws Exception{
		frame=new RFrame("Blopic",640,480,(byte) 60);
		frame.setVisible(true);
		blopic=new Blopic(port);
		blopic.load();

		module=new Module[blopic.list.size()];
		for(int i=0;i<blopic.list.size();i++){
			module[i]=new Module(frame,i*MODULE_DISTANCE,0,blopic.list.get(i),new Color(255,0,0));
		}

		camera_position=new Point(10,frame.getHeight()/2);
	}

	private void setOutputState(byte count) throws Exception{
		byte data[]={1,0};
		byte key=1;
		if(blopic.hash.containsKey(key)){
			if(count<blopic.hash.get(key).size()){
				data[0]=(byte)blopic.hash.get(key).get(count);
			}
		}
	}
	private boolean getSwitchState(byte count) throws Exception{
		byte data[]={2,0};
		byte key=2;
		boolean flag=false;
		if(blopic.hash.containsKey(key)){
			if(count<blopic.hash.get(key).size()){
				data[0]=(byte)blopic.hash.get(key).get(count);
				String[] res=blopic.query(data);
				flag=Integer.parseInt(res[1])!=0;
			}
		}
		return flag;
	}
	private short getResistorValue(byte count) throws Exception{
		byte data[]={3,0,1,2};
		byte key=3;
		short val=-1;
		if(blopic.hash.containsKey(key)){
			if(count<blopic.hash.get(key).size()){
				data[0]=(byte)blopic.hash.get(key).get(count);
				String[] res=blopic.query(data);
				val=(short) (Short.parseShort(res[1])<<8|Short.parseShort(res[2]));
			}
		}
		return val;
	}

	private void moveCamera(){
		if(frame.getClick(RFrame.MOUSE_INPUT_RIGHT)>0){
			if(frame.getClick(RFrame.MOUSE_INPUT_RIGHT)==1){
				old_camera_position=frame.getMousePosition();
			}
			else{
				camera_position.x+=frame.getMousePosition().x-old_camera_position.x;
				camera_position.y+=frame.getMousePosition().y-old_camera_position.y;
				old_camera_position=frame.getMousePosition();
			}
		}
	}
	private void moveModule(){
		if(frame.getClick(RFrame.MOUSE_INPUT_LEFT)>0){

			if(frame.getClick(RFrame.MOUSE_INPUT_LEFT)==1){
				module_select_number=-1;
				for(int i=0;i<module.length;i++){
					
					frame.drawString(30,30+i*30,Color.RED,
							(camera_position.x-module[i].getPositionX())+">"+frame.getmousePosition().x+"???"+
							(camera_position.y-module[i].getPositionY())+">"+frame.getmousePosition().y
						);
					
					if(	camera_position.x-module[i].getPositionX()>frame.getmousePosition().x&&
						camera_position.y-module[i].getPositionY()>frame.getmousePosition().y&&
						camera_position.x-module[i].getPositionX()<frame.getmousePosition().x+Module.MODULE_DRAW_SIZE&&
						camera_position.y-module[i].getPositionY()<frame.getmousePosition().y+Module.MODULE_DRAW_SIZE){
						module_select_number=i;
						frame.drawBox(0,0,100,100,Color.GREEN,true);
						break;
					}
				}
				old_camera_position=frame.getMousePosition();
			}
			else{
				if(module_select_number>=0){
					module[module_select_number].movePosition(
							frame.getMousePosition().x-old_camera_position.x,
							frame.getMousePosition().y-old_camera_position.y);
					old_camera_position=frame.getMousePosition();
				}
			}
		}
	}
	private void drawModule(){
		for(int i=0;i<module.length;i++){
			module[i].draw(camera_position.x,camera_position.y);
		}
	}

	public void run() throws Exception{
		while(!frame.update()){
			frame.drawBox(0, 0, frame.getWidth(),frame.getHeight(),BGColor,true);
			drawModule();
			moveCamera();
			moveModule();
		}
	}
	public void close() throws Exception{
		if(blopic!=null){
			blopic.close();
		}
		if(frame!=null){
			frame.setVisible(false);
		}
		System.exit(0);
	}
}
